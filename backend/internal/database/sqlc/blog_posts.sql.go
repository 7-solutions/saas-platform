// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: blog_posts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addPostCategory = `-- name: AddPostCategory :exec

INSERT INTO blog_post_categories (post_id, category_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddPostCategoryParams struct {
	PostID     pgtype.UUID `json:"post_id"`
	CategoryID pgtype.UUID `json:"category_id"`
}

// Post-Category linking
func (q *Queries) AddPostCategory(ctx context.Context, arg AddPostCategoryParams) error {
	_, err := q.db.Exec(ctx, addPostCategory, arg.PostID, arg.CategoryID)
	return err
}

const addPostTag = `-- name: AddPostTag :exec

INSERT INTO blog_post_tags (post_id, tag_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddPostTagParams struct {
	PostID pgtype.UUID `json:"post_id"`
	TagID  pgtype.UUID `json:"tag_id"`
}

// Post-Tag linking
func (q *Queries) AddPostTag(ctx context.Context, arg AddPostTagParams) error {
	_, err := q.db.Exec(ctx, addPostTag, arg.PostID, arg.TagID)
	return err
}

const deletePostByID = `-- name: DeletePostByID :exec
DELETE FROM blog_posts
WHERE id = $1
`

func (q *Queries) DeletePostByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePostByID, id)
	return err
}

const getCategoryBySlug = `-- name: GetCategoryBySlug :one
SELECT id, slug, name, description, created_at, updated_at
FROM categories
WHERE slug = $1
LIMIT 1
`

func (q *Queries) GetCategoryBySlug(ctx context.Context, slug string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryBySlug, slug)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryCounts = `-- name: GetCategoryCounts :many
SELECT c.id, c.slug, c.name, COUNT(pc.post_id) AS count
FROM categories c
LEFT JOIN blog_post_categories pc ON pc.category_id = c.id
GROUP BY c.id, c.slug, c.name
ORDER BY count DESC, c.name ASC
`

type GetCategoryCountsRow struct {
	ID    pgtype.UUID `json:"id"`
	Slug  string      `json:"slug"`
	Name  string      `json:"name"`
	Count int64       `json:"count"`
}

func (q *Queries) GetCategoryCounts(ctx context.Context) ([]GetCategoryCountsRow, error) {
	rows, err := q.db.Query(ctx, getCategoryCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoryCountsRow
	for rows.Next() {
		var i GetCategoryCountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Name,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostBySlug = `-- name: GetPostBySlug :one
SELECT id, slug, title, excerpt, content, status, author_id, published_at, created_at, updated_at, search_tsv
FROM blog_posts
WHERE slug = $1
LIMIT 1
`

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (BlogPost, error) {
	row := q.db.QueryRow(ctx, getPostBySlug, slug)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Excerpt,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SearchTsv,
	)
	return i, err
}

const getTagBySlug = `-- name: GetTagBySlug :one
SELECT id, slug, name, created_at, updated_at
FROM tags
WHERE slug = $1
LIMIT 1
`

func (q *Queries) GetTagBySlug(ctx context.Context, slug string) (Tag, error) {
	row := q.db.QueryRow(ctx, getTagBySlug, slug)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagCounts = `-- name: GetTagCounts :many
SELECT t.id, t.slug, t.name, COUNT(pt.post_id) AS count
FROM tags t
LEFT JOIN blog_post_tags pt ON pt.tag_id = t.id
GROUP BY t.id, t.slug, t.name
ORDER BY count DESC, t.name ASC
`

type GetTagCountsRow struct {
	ID    pgtype.UUID `json:"id"`
	Slug  string      `json:"slug"`
	Name  string      `json:"name"`
	Count int64       `json:"count"`
}

func (q *Queries) GetTagCounts(ctx context.Context) ([]GetTagCountsRow, error) {
	rows, err := q.db.Query(ctx, getTagCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagCountsRow
	for rows.Next() {
		var i GetTagCountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Name,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCategory = `-- name: InsertCategory :one

INSERT INTO categories (slug, name, description)
VALUES ($1, $2, $3)
RETURNING id, slug, name, description, created_at, updated_at
`

type InsertCategoryParams struct {
	Slug        string  `json:"slug"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

// Minimal Category CRUD
func (q *Queries) InsertCategory(ctx context.Context, arg InsertCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, insertCategory, arg.Slug, arg.Name, arg.Description)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPost = `-- name: InsertPost :one
INSERT INTO blog_posts (
  slug, title, excerpt, content, status, author_id, published_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, slug, title, excerpt, content, status, author_id, published_at, created_at, updated_at, search_tsv
`

type InsertPostParams struct {
	Slug        string             `json:"slug"`
	Title       string             `json:"title"`
	Excerpt     *string            `json:"excerpt"`
	Content     string             `json:"content"`
	Status      string             `json:"status"`
	AuthorID    pgtype.UUID        `json:"author_id"`
	PublishedAt pgtype.Timestamptz `json:"published_at"`
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) (BlogPost, error) {
	row := q.db.QueryRow(ctx, insertPost,
		arg.Slug,
		arg.Title,
		arg.Excerpt,
		arg.Content,
		arg.Status,
		arg.AuthorID,
		arg.PublishedAt,
	)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Excerpt,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SearchTsv,
	)
	return i, err
}

const insertTag = `-- name: InsertTag :one

INSERT INTO tags (slug, name)
VALUES ($1, $2)
RETURNING id, slug, name, created_at, updated_at
`

type InsertTagParams struct {
	Slug string `json:"slug"`
	Name string `json:"name"`
}

// Minimal Tag CRUD
func (q *Queries) InsertTag(ctx context.Context, arg InsertTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, insertTag, arg.Slug, arg.Name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPostsAll = `-- name: ListPostsAll :many
SELECT id, slug, title, excerpt, content, status, author_id, published_at, created_at, updated_at, search_tsv
FROM blog_posts
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListPostsAllParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPostsAll(ctx context.Context, arg ListPostsAllParams) ([]BlogPost, error) {
	rows, err := q.db.Query(ctx, listPostsAll, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Excerpt,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByAuthor = `-- name: ListPostsByAuthor :many
SELECT id, slug, title, excerpt, content, status, author_id, published_at, created_at, updated_at, search_tsv
FROM blog_posts
WHERE author_id = $1
ORDER BY COALESCE(published_at, created_at) DESC, created_at DESC
LIMIT $2 OFFSET $3
`

type ListPostsByAuthorParams struct {
	AuthorID pgtype.UUID `json:"author_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListPostsByAuthor(ctx context.Context, arg ListPostsByAuthorParams) ([]BlogPost, error) {
	rows, err := q.db.Query(ctx, listPostsByAuthor, arg.AuthorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Excerpt,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByCategorySlug = `-- name: ListPostsByCategorySlug :many
SELECT p.id, p.slug, p.title, p.excerpt, p.content, p.status, p.author_id, p.published_at, p.created_at, p.updated_at, p.search_tsv
FROM blog_posts p
JOIN blog_post_categories pc ON pc.post_id = p.id
JOIN categories c ON c.id = pc.category_id
WHERE c.slug = $1
ORDER BY COALESCE(p.published_at, p.created_at) DESC, p.created_at DESC
LIMIT $2 OFFSET $3
`

type ListPostsByCategorySlugParams struct {
	Slug   string `json:"slug"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListPostsByCategorySlug(ctx context.Context, arg ListPostsByCategorySlugParams) ([]BlogPost, error) {
	rows, err := q.db.Query(ctx, listPostsByCategorySlug, arg.Slug, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Excerpt,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByStatus = `-- name: ListPostsByStatus :many
SELECT id, slug, title, excerpt, content, status, author_id, published_at, created_at, updated_at, search_tsv
FROM blog_posts
WHERE status = $1
ORDER BY COALESCE(published_at, created_at) DESC, created_at DESC
LIMIT $2 OFFSET $3
`

type ListPostsByStatusParams struct {
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListPostsByStatus(ctx context.Context, arg ListPostsByStatusParams) ([]BlogPost, error) {
	rows, err := q.db.Query(ctx, listPostsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Excerpt,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByTagSlug = `-- name: ListPostsByTagSlug :many
SELECT p.id, p.slug, p.title, p.excerpt, p.content, p.status, p.author_id, p.published_at, p.created_at, p.updated_at, p.search_tsv
FROM blog_posts p
JOIN blog_post_tags pt ON pt.post_id = p.id
JOIN tags t ON t.id = pt.tag_id
WHERE t.slug = $1
ORDER BY COALESCE(p.published_at, p.created_at) DESC, p.created_at DESC
LIMIT $2 OFFSET $3
`

type ListPostsByTagSlugParams struct {
	Slug   string `json:"slug"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListPostsByTagSlug(ctx context.Context, arg ListPostsByTagSlugParams) ([]BlogPost, error) {
	rows, err := q.db.Query(ctx, listPostsByTagSlug, arg.Slug, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Excerpt,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublishedPosts = `-- name: ListPublishedPosts :many
SELECT id, slug, title, excerpt, content, status, author_id, published_at, created_at, updated_at, search_tsv
FROM blog_posts
WHERE status = 'published'
ORDER BY COALESCE(published_at, created_at) DESC, created_at DESC
LIMIT $1 OFFSET $2
`

type ListPublishedPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPublishedPosts(ctx context.Context, arg ListPublishedPostsParams) ([]BlogPost, error) {
	rows, err := q.db.Query(ctx, listPublishedPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Excerpt,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePostCategory = `-- name: RemovePostCategory :exec
DELETE FROM blog_post_categories
WHERE post_id = $1 AND category_id = $2
`

type RemovePostCategoryParams struct {
	PostID     pgtype.UUID `json:"post_id"`
	CategoryID pgtype.UUID `json:"category_id"`
}

func (q *Queries) RemovePostCategory(ctx context.Context, arg RemovePostCategoryParams) error {
	_, err := q.db.Exec(ctx, removePostCategory, arg.PostID, arg.CategoryID)
	return err
}

const removePostTag = `-- name: RemovePostTag :exec
DELETE FROM blog_post_tags
WHERE post_id = $1 AND tag_id = $2
`

type RemovePostTagParams struct {
	PostID pgtype.UUID `json:"post_id"`
	TagID  pgtype.UUID `json:"tag_id"`
}

func (q *Queries) RemovePostTag(ctx context.Context, arg RemovePostTagParams) error {
	_, err := q.db.Exec(ctx, removePostTag, arg.PostID, arg.TagID)
	return err
}

const searchPosts = `-- name: SearchPosts :many
SELECT id, slug, title, excerpt, content, status, author_id, published_at, created_at, updated_at, search_tsv
FROM blog_posts
WHERE search_tsv @@ to_tsquery('simple', $1)
ORDER BY ts_rank_cd(search_tsv, to_tsquery('simple', $1)) DESC,
         COALESCE(published_at, created_at) DESC
LIMIT $2 OFFSET $3
`

type SearchPostsParams struct {
	ToTsquery string `json:"to_tsquery"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

// tsquery should be provided by caller, e.g., to_tsquery('simple', 'term1:* & term2:*')
func (q *Queries) SearchPosts(ctx context.Context, arg SearchPostsParams) ([]BlogPost, error) {
	rows, err := q.db.Query(ctx, searchPosts, arg.ToTsquery, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Excerpt,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE blog_posts
SET
  slug = COALESCE($2, slug),
  title = COALESCE($3, title),
  excerpt = COALESCE($4, excerpt),
  content = COALESCE($5, content),
  status = COALESCE($6, status),
  author_id = COALESCE($7, author_id),
  published_at = COALESCE($8, published_at)
WHERE id = $1
RETURNING id, slug, title, excerpt, content, status, author_id, published_at, created_at, updated_at, search_tsv
`

type UpdatePostParams struct {
	ID          pgtype.UUID        `json:"id"`
	Slug        string             `json:"slug"`
	Title       string             `json:"title"`
	Excerpt     *string            `json:"excerpt"`
	Content     string             `json:"content"`
	Status      string             `json:"status"`
	AuthorID    pgtype.UUID        `json:"author_id"`
	PublishedAt pgtype.Timestamptz `json:"published_at"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (BlogPost, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.Slug,
		arg.Title,
		arg.Excerpt,
		arg.Content,
		arg.Status,
		arg.AuthorID,
		arg.PublishedAt,
	)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Excerpt,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SearchTsv,
	)
	return i, err
}
