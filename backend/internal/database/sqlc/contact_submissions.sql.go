// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contact_submissions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countContactsByStatus = `-- name: CountContactsByStatus :one
SELECT COUNT(*)::bigint AS count
FROM contact_submissions
WHERE status = $1
`

func (q *Queries) CountContactsByStatus(ctx context.Context, status string) (int64, error) {
	row := q.db.QueryRow(ctx, countContactsByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertContact = `-- name: InsertContact :one
INSERT INTO contact_submissions (
  email, name, subject, message, status
) VALUES (
  $1, $2, $3, $4, COALESCE($5, 'new')
)
RETURNING id, email, name, subject, message, status, created_at, updated_at, search_tsv
`

type InsertContactParams struct {
	Email   string      `json:"email"`
	Name    *string     `json:"name"`
	Subject *string     `json:"subject"`
	Message string      `json:"message"`
	Column5 interface{} `json:"column_5"`
}

func (q *Queries) InsertContact(ctx context.Context, arg InsertContactParams) (ContactSubmission, error) {
	row := q.db.QueryRow(ctx, insertContact,
		arg.Email,
		arg.Name,
		arg.Subject,
		arg.Message,
		arg.Column5,
	)
	var i ContactSubmission
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Subject,
		&i.Message,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SearchTsv,
	)
	return i, err
}

const listContactsByCreatedAt = `-- name: ListContactsByCreatedAt :many
SELECT id, email, name, subject, message, status, created_at, updated_at, search_tsv
FROM contact_submissions
WHERE created_at >= $1 AND created_at <= $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListContactsByCreatedAtParams struct {
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	CreatedAt_2 pgtype.Timestamptz `json:"created_at_2"`
	Limit       int32              `json:"limit"`
	Offset      int32              `json:"offset"`
}

func (q *Queries) ListContactsByCreatedAt(ctx context.Context, arg ListContactsByCreatedAtParams) ([]ContactSubmission, error) {
	rows, err := q.db.Query(ctx, listContactsByCreatedAt,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactSubmission
	for rows.Next() {
		var i ContactSubmission
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Subject,
			&i.Message,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContactsByEmail = `-- name: ListContactsByEmail :many
SELECT id, email, name, subject, message, status, created_at, updated_at, search_tsv
FROM contact_submissions
WHERE email = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListContactsByEmailParams struct {
	Email  string `json:"email"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListContactsByEmail(ctx context.Context, arg ListContactsByEmailParams) ([]ContactSubmission, error) {
	rows, err := q.db.Query(ctx, listContactsByEmail, arg.Email, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactSubmission
	for rows.Next() {
		var i ContactSubmission
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Subject,
			&i.Message,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContactsByStatus = `-- name: ListContactsByStatus :many
SELECT id, email, name, subject, message, status, created_at, updated_at, search_tsv
FROM contact_submissions
WHERE status = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListContactsByStatusParams struct {
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListContactsByStatus(ctx context.Context, arg ListContactsByStatusParams) ([]ContactSubmission, error) {
	rows, err := q.db.Query(ctx, listContactsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactSubmission
	for rows.Next() {
		var i ContactSubmission
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Subject,
			&i.Message,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchContacts = `-- name: SearchContacts :many
SELECT id, email, name, subject, message, status, created_at, updated_at, search_tsv
FROM contact_submissions
WHERE search_tsv @@ to_tsquery('simple', $1)
ORDER BY ts_rank_cd(search_tsv, to_tsquery('simple', $1)) DESC,
         created_at DESC
LIMIT $2 OFFSET $3
`

type SearchContactsParams struct {
	ToTsquery string `json:"to_tsquery"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

// tsquery should be provided by caller, e.g., to_tsquery('simple', 'term1:* & term2:*')
func (q *Queries) SearchContacts(ctx context.Context, arg SearchContactsParams) ([]ContactSubmission, error) {
	rows, err := q.db.Query(ctx, searchContacts, arg.ToTsquery, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactSubmission
	for rows.Next() {
		var i ContactSubmission
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Subject,
			&i.Message,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContactStatus = `-- name: UpdateContactStatus :one
UPDATE contact_submissions
SET status = $2
WHERE id = $1
RETURNING id, email, name, subject, message, status, created_at, updated_at, search_tsv
`

type UpdateContactStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status string      `json:"status"`
}

func (q *Queries) UpdateContactStatus(ctx context.Context, arg UpdateContactStatusParams) (ContactSubmission, error) {
	row := q.db.QueryRow(ctx, updateContactStatus, arg.ID, arg.Status)
	var i ContactSubmission
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Subject,
		&i.Message,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SearchTsv,
	)
	return i, err
}
