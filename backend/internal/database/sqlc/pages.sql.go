// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deletePageByID = `-- name: DeletePageByID :exec
DELETE FROM pages
WHERE id = $1
`

func (q *Queries) DeletePageByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePageByID, id)
	return err
}

const getPageBySlug = `-- name: GetPageBySlug :one
SELECT id, slug, title, content, status, author_id, published_at, created_at, updated_at, search_tsv
FROM pages
WHERE slug = $1
LIMIT 1
`

func (q *Queries) GetPageBySlug(ctx context.Context, slug string) (Page, error) {
	row := q.db.QueryRow(ctx, getPageBySlug, slug)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SearchTsv,
	)
	return i, err
}

const insertPage = `-- name: InsertPage :one
INSERT INTO pages (
  slug, title, content, status, author_id, published_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, slug, title, content, status, author_id, published_at, created_at, updated_at, search_tsv
`

type InsertPageParams struct {
	Slug        string             `json:"slug"`
	Title       string             `json:"title"`
	Content     string             `json:"content"`
	Status      string             `json:"status"`
	AuthorID    pgtype.UUID        `json:"author_id"`
	PublishedAt pgtype.Timestamptz `json:"published_at"`
}

func (q *Queries) InsertPage(ctx context.Context, arg InsertPageParams) (Page, error) {
	row := q.db.QueryRow(ctx, insertPage,
		arg.Slug,
		arg.Title,
		arg.Content,
		arg.Status,
		arg.AuthorID,
		arg.PublishedAt,
	)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SearchTsv,
	)
	return i, err
}

const listPagesByAuthor = `-- name: ListPagesByAuthor :many
SELECT id, slug, title, content, status, author_id, published_at, created_at, updated_at, search_tsv
FROM pages
WHERE author_id = $1
ORDER BY COALESCE(published_at, created_at) DESC, created_at DESC
LIMIT $2 OFFSET $3
`

type ListPagesByAuthorParams struct {
	AuthorID pgtype.UUID `json:"author_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListPagesByAuthor(ctx context.Context, arg ListPagesByAuthorParams) ([]Page, error) {
	rows, err := q.db.Query(ctx, listPagesByAuthor, arg.AuthorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPagesByStatus = `-- name: ListPagesByStatus :many
SELECT id, slug, title, content, status, author_id, published_at, created_at, updated_at, search_tsv
FROM pages
WHERE status = $1
ORDER BY COALESCE(published_at, created_at) DESC, created_at DESC
LIMIT $2 OFFSET $3
`

type ListPagesByStatusParams struct {
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListPagesByStatus(ctx context.Context, arg ListPagesByStatusParams) ([]Page, error) {
	rows, err := q.db.Query(ctx, listPagesByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPages = `-- name: SearchPages :many
SELECT id, slug, title, content, status, author_id, published_at, created_at, updated_at, search_tsv
FROM pages
WHERE search_tsv @@ to_tsquery('simple', $1)
ORDER BY ts_rank_cd(search_tsv, to_tsquery('simple', $1)) DESC,
         COALESCE(published_at, created_at) DESC
LIMIT $2 OFFSET $3
`

type SearchPagesParams struct {
	ToTsquery string `json:"to_tsquery"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

// tsquery should be provided by caller, e.g., to_tsquery('simple', 'term1:* & term2:*')
func (q *Queries) SearchPages(ctx context.Context, arg SearchPagesParams) ([]Page, error) {
	rows, err := q.db.Query(ctx, searchPages, arg.ToTsquery, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.AuthorID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SearchTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePage = `-- name: UpdatePage :one
UPDATE pages
SET
  slug = COALESCE($2, slug),
  title = COALESCE($3, title),
  content = COALESCE($4, content),
  status = COALESCE($5, status),
  author_id = COALESCE($6, author_id),
  published_at = COALESCE($7, published_at)
WHERE id = $1
RETURNING id, slug, title, content, status, author_id, published_at, created_at, updated_at, search_tsv
`

type UpdatePageParams struct {
	ID          pgtype.UUID        `json:"id"`
	Slug        string             `json:"slug"`
	Title       string             `json:"title"`
	Content     string             `json:"content"`
	Status      string             `json:"status"`
	AuthorID    pgtype.UUID        `json:"author_id"`
	PublishedAt pgtype.Timestamptz `json:"published_at"`
}

func (q *Queries) UpdatePage(ctx context.Context, arg UpdatePageParams) (Page, error) {
	row := q.db.QueryRow(ctx, updatePage,
		arg.ID,
		arg.Slug,
		arg.Title,
		arg.Content,
		arg.Status,
		arg.AuthorID,
		arg.PublishedAt,
	)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.AuthorID,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SearchTsv,
	)
	return i, err
}
