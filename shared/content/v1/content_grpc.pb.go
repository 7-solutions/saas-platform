// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: content/v1/content.proto

package contentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ContentService_CreatePage_FullMethodName        = "/content.v1.ContentService/CreatePage"
	ContentService_GetPage_FullMethodName           = "/content.v1.ContentService/GetPage"
	ContentService_UpdatePage_FullMethodName        = "/content.v1.ContentService/UpdatePage"
	ContentService_DeletePage_FullMethodName        = "/content.v1.ContentService/DeletePage"
	ContentService_ListPages_FullMethodName         = "/content.v1.ContentService/ListPages"
	ContentService_CreateBlogPost_FullMethodName    = "/content.v1.ContentService/CreateBlogPost"
	ContentService_GetBlogPost_FullMethodName       = "/content.v1.ContentService/GetBlogPost"
	ContentService_UpdateBlogPost_FullMethodName    = "/content.v1.ContentService/UpdateBlogPost"
	ContentService_DeleteBlogPost_FullMethodName    = "/content.v1.ContentService/DeleteBlogPost"
	ContentService_ListBlogPosts_FullMethodName     = "/content.v1.ContentService/ListBlogPosts"
	ContentService_SearchBlogPosts_FullMethodName   = "/content.v1.ContentService/SearchBlogPosts"
	ContentService_GetBlogCategories_FullMethodName = "/content.v1.ContentService/GetBlogCategories"
	ContentService_GetBlogTags_FullMethodName       = "/content.v1.ContentService/GetBlogTags"
	ContentService_GetRSSFeed_FullMethodName        = "/content.v1.ContentService/GetRSSFeed"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Content service for managing pages and blog posts
type ContentServiceClient interface {
	// Create a new page
	CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*Page, error)
	// Get a page by ID
	GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*Page, error)
	// Update an existing page
	UpdatePage(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*Page, error)
	// Delete a page
	DeletePage(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List pages with filtering and pagination
	ListPages(ctx context.Context, in *ListPagesRequest, opts ...grpc.CallOption) (*ListPagesResponse, error)
	// Create a new blog post
	CreateBlogPost(ctx context.Context, in *CreateBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error)
	// Get a blog post by ID
	GetBlogPost(ctx context.Context, in *GetBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error)
	// Update an existing blog post
	UpdateBlogPost(ctx context.Context, in *UpdateBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error)
	// Delete a blog post
	DeleteBlogPost(ctx context.Context, in *DeleteBlogPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List blog posts with filtering and pagination
	ListBlogPosts(ctx context.Context, in *ListBlogPostsRequest, opts ...grpc.CallOption) (*ListBlogPostsResponse, error)
	// Search blog posts
	SearchBlogPosts(ctx context.Context, in *SearchBlogPostsRequest, opts ...grpc.CallOption) (*SearchBlogPostsResponse, error)
	// Get blog categories
	GetBlogCategories(ctx context.Context, in *GetBlogCategoriesRequest, opts ...grpc.CallOption) (*GetBlogCategoriesResponse, error)
	// Get blog tags
	GetBlogTags(ctx context.Context, in *GetBlogTagsRequest, opts ...grpc.CallOption) (*GetBlogTagsResponse, error)
	// Generate RSS feed
	GetRSSFeed(ctx context.Context, in *GetRSSFeedRequest, opts ...grpc.CallOption) (*GetRSSFeedResponse, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*Page, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Page)
	err := c.cc.Invoke(ctx, ContentService_CreatePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*Page, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Page)
	err := c.cc.Invoke(ctx, ContentService_GetPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdatePage(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*Page, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Page)
	err := c.cc.Invoke(ctx, ContentService_UpdatePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeletePage(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ContentService_DeletePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ListPages(ctx context.Context, in *ListPagesRequest, opts ...grpc.CallOption) (*ListPagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPagesResponse)
	err := c.cc.Invoke(ctx, ContentService_ListPages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateBlogPost(ctx context.Context, in *CreateBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogPost)
	err := c.cc.Invoke(ctx, ContentService_CreateBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetBlogPost(ctx context.Context, in *GetBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogPost)
	err := c.cc.Invoke(ctx, ContentService_GetBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdateBlogPost(ctx context.Context, in *UpdateBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogPost)
	err := c.cc.Invoke(ctx, ContentService_UpdateBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteBlogPost(ctx context.Context, in *DeleteBlogPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ContentService_DeleteBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ListBlogPosts(ctx context.Context, in *ListBlogPostsRequest, opts ...grpc.CallOption) (*ListBlogPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlogPostsResponse)
	err := c.cc.Invoke(ctx, ContentService_ListBlogPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SearchBlogPosts(ctx context.Context, in *SearchBlogPostsRequest, opts ...grpc.CallOption) (*SearchBlogPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchBlogPostsResponse)
	err := c.cc.Invoke(ctx, ContentService_SearchBlogPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetBlogCategories(ctx context.Context, in *GetBlogCategoriesRequest, opts ...grpc.CallOption) (*GetBlogCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlogCategoriesResponse)
	err := c.cc.Invoke(ctx, ContentService_GetBlogCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetBlogTags(ctx context.Context, in *GetBlogTagsRequest, opts ...grpc.CallOption) (*GetBlogTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlogTagsResponse)
	err := c.cc.Invoke(ctx, ContentService_GetBlogTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetRSSFeed(ctx context.Context, in *GetRSSFeedRequest, opts ...grpc.CallOption) (*GetRSSFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRSSFeedResponse)
	err := c.cc.Invoke(ctx, ContentService_GetRSSFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
//
// Content service for managing pages and blog posts
type ContentServiceServer interface {
	// Create a new page
	CreatePage(context.Context, *CreatePageRequest) (*Page, error)
	// Get a page by ID
	GetPage(context.Context, *GetPageRequest) (*Page, error)
	// Update an existing page
	UpdatePage(context.Context, *UpdatePageRequest) (*Page, error)
	// Delete a page
	DeletePage(context.Context, *DeletePageRequest) (*emptypb.Empty, error)
	// List pages with filtering and pagination
	ListPages(context.Context, *ListPagesRequest) (*ListPagesResponse, error)
	// Create a new blog post
	CreateBlogPost(context.Context, *CreateBlogPostRequest) (*BlogPost, error)
	// Get a blog post by ID
	GetBlogPost(context.Context, *GetBlogPostRequest) (*BlogPost, error)
	// Update an existing blog post
	UpdateBlogPost(context.Context, *UpdateBlogPostRequest) (*BlogPost, error)
	// Delete a blog post
	DeleteBlogPost(context.Context, *DeleteBlogPostRequest) (*emptypb.Empty, error)
	// List blog posts with filtering and pagination
	ListBlogPosts(context.Context, *ListBlogPostsRequest) (*ListBlogPostsResponse, error)
	// Search blog posts
	SearchBlogPosts(context.Context, *SearchBlogPostsRequest) (*SearchBlogPostsResponse, error)
	// Get blog categories
	GetBlogCategories(context.Context, *GetBlogCategoriesRequest) (*GetBlogCategoriesResponse, error)
	// Get blog tags
	GetBlogTags(context.Context, *GetBlogTagsRequest) (*GetBlogTagsResponse, error)
	// Generate RSS feed
	GetRSSFeed(context.Context, *GetRSSFeedRequest) (*GetRSSFeedResponse, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) CreatePage(context.Context, *CreatePageRequest) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (UnimplementedContentServiceServer) GetPage(context.Context, *GetPageRequest) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedContentServiceServer) UpdatePage(context.Context, *UpdatePageRequest) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePage not implemented")
}
func (UnimplementedContentServiceServer) DeletePage(context.Context, *DeletePageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (UnimplementedContentServiceServer) ListPages(context.Context, *ListPagesRequest) (*ListPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPages not implemented")
}
func (UnimplementedContentServiceServer) CreateBlogPost(context.Context, *CreateBlogPostRequest) (*BlogPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlogPost not implemented")
}
func (UnimplementedContentServiceServer) GetBlogPost(context.Context, *GetBlogPostRequest) (*BlogPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogPost not implemented")
}
func (UnimplementedContentServiceServer) UpdateBlogPost(context.Context, *UpdateBlogPostRequest) (*BlogPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlogPost not implemented")
}
func (UnimplementedContentServiceServer) DeleteBlogPost(context.Context, *DeleteBlogPostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlogPost not implemented")
}
func (UnimplementedContentServiceServer) ListBlogPosts(context.Context, *ListBlogPostsRequest) (*ListBlogPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlogPosts not implemented")
}
func (UnimplementedContentServiceServer) SearchBlogPosts(context.Context, *SearchBlogPostsRequest) (*SearchBlogPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlogPosts not implemented")
}
func (UnimplementedContentServiceServer) GetBlogCategories(context.Context, *GetBlogCategoriesRequest) (*GetBlogCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogCategories not implemented")
}
func (UnimplementedContentServiceServer) GetBlogTags(context.Context, *GetBlogTagsRequest) (*GetBlogTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogTags not implemented")
}
func (UnimplementedContentServiceServer) GetRSSFeed(context.Context, *GetRSSFeedRequest) (*GetRSSFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRSSFeed not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreatePage(ctx, req.(*CreatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetPage(ctx, req.(*GetPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UpdatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdatePage(ctx, req.(*UpdatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeletePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeletePage(ctx, req.(*DeletePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ListPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ListPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ListPages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ListPages(ctx, req.(*ListPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreateBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateBlogPost(ctx, req.(*CreateBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetBlogPost(ctx, req.(*GetBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdateBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdateBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UpdateBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdateBlogPost(ctx, req.(*UpdateBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteBlogPost(ctx, req.(*DeleteBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ListBlogPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlogPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ListBlogPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ListBlogPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ListBlogPosts(ctx, req.(*ListBlogPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SearchBlogPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlogPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SearchBlogPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_SearchBlogPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SearchBlogPosts(ctx, req.(*SearchBlogPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetBlogCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetBlogCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetBlogCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetBlogCategories(ctx, req.(*GetBlogCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetBlogTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetBlogTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetBlogTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetBlogTags(ctx, req.(*GetBlogTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetRSSFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRSSFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetRSSFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetRSSFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetRSSFeed(ctx, req.(*GetRSSFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.v1.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePage",
			Handler:    _ContentService_CreatePage_Handler,
		},
		{
			MethodName: "GetPage",
			Handler:    _ContentService_GetPage_Handler,
		},
		{
			MethodName: "UpdatePage",
			Handler:    _ContentService_UpdatePage_Handler,
		},
		{
			MethodName: "DeletePage",
			Handler:    _ContentService_DeletePage_Handler,
		},
		{
			MethodName: "ListPages",
			Handler:    _ContentService_ListPages_Handler,
		},
		{
			MethodName: "CreateBlogPost",
			Handler:    _ContentService_CreateBlogPost_Handler,
		},
		{
			MethodName: "GetBlogPost",
			Handler:    _ContentService_GetBlogPost_Handler,
		},
		{
			MethodName: "UpdateBlogPost",
			Handler:    _ContentService_UpdateBlogPost_Handler,
		},
		{
			MethodName: "DeleteBlogPost",
			Handler:    _ContentService_DeleteBlogPost_Handler,
		},
		{
			MethodName: "ListBlogPosts",
			Handler:    _ContentService_ListBlogPosts_Handler,
		},
		{
			MethodName: "SearchBlogPosts",
			Handler:    _ContentService_SearchBlogPosts_Handler,
		},
		{
			MethodName: "GetBlogCategories",
			Handler:    _ContentService_GetBlogCategories_Handler,
		},
		{
			MethodName: "GetBlogTags",
			Handler:    _ContentService_GetBlogTags_Handler,
		},
		{
			MethodName: "GetRSSFeed",
			Handler:    _ContentService_GetRSSFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content/v1/content.proto",
}
