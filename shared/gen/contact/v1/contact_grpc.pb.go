// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: contact/v1/contact.proto

package contactv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ContactService_SubmitContactForm_FullMethodName           = "/contact.v1.ContactService/SubmitContactForm"
	ContactService_ListContactSubmissions_FullMethodName      = "/contact.v1.ContactService/ListContactSubmissions"
	ContactService_GetContactSubmission_FullMethodName        = "/contact.v1.ContactService/GetContactSubmission"
	ContactService_MarkContactSubmissionAsRead_FullMethodName = "/contact.v1.ContactService/MarkContactSubmissionAsRead"
	ContactService_DeleteContactSubmission_FullMethodName     = "/contact.v1.ContactService/DeleteContactSubmission"
)

// ContactServiceClient is the client API for ContactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Contact service for managing contact form submissions
type ContactServiceClient interface {
	// Submit a contact form
	SubmitContactForm(ctx context.Context, in *SubmitContactFormRequest, opts ...grpc.CallOption) (*ContactSubmission, error)
	// List contact submissions (admin only)
	ListContactSubmissions(ctx context.Context, in *ListContactSubmissionsRequest, opts ...grpc.CallOption) (*ListContactSubmissionsResponse, error)
	// Get a specific contact submission (admin only)
	GetContactSubmission(ctx context.Context, in *GetContactSubmissionRequest, opts ...grpc.CallOption) (*ContactSubmission, error)
	// Mark contact submission as read (admin only)
	MarkContactSubmissionAsRead(ctx context.Context, in *MarkContactSubmissionAsReadRequest, opts ...grpc.CallOption) (*ContactSubmission, error)
	// Delete contact submission (admin only)
	DeleteContactSubmission(ctx context.Context, in *DeleteContactSubmissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type contactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactServiceClient(cc grpc.ClientConnInterface) ContactServiceClient {
	return &contactServiceClient{cc}
}

func (c *contactServiceClient) SubmitContactForm(ctx context.Context, in *SubmitContactFormRequest, opts ...grpc.CallOption) (*ContactSubmission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactSubmission)
	err := c.cc.Invoke(ctx, ContactService_SubmitContactForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) ListContactSubmissions(ctx context.Context, in *ListContactSubmissionsRequest, opts ...grpc.CallOption) (*ListContactSubmissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContactSubmissionsResponse)
	err := c.cc.Invoke(ctx, ContactService_ListContactSubmissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) GetContactSubmission(ctx context.Context, in *GetContactSubmissionRequest, opts ...grpc.CallOption) (*ContactSubmission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactSubmission)
	err := c.cc.Invoke(ctx, ContactService_GetContactSubmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) MarkContactSubmissionAsRead(ctx context.Context, in *MarkContactSubmissionAsReadRequest, opts ...grpc.CallOption) (*ContactSubmission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactSubmission)
	err := c.cc.Invoke(ctx, ContactService_MarkContactSubmissionAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) DeleteContactSubmission(ctx context.Context, in *DeleteContactSubmissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ContactService_DeleteContactSubmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactServiceServer is the server API for ContactService service.
// All implementations must embed UnimplementedContactServiceServer
// for forward compatibility
//
// Contact service for managing contact form submissions
type ContactServiceServer interface {
	// Submit a contact form
	SubmitContactForm(context.Context, *SubmitContactFormRequest) (*ContactSubmission, error)
	// List contact submissions (admin only)
	ListContactSubmissions(context.Context, *ListContactSubmissionsRequest) (*ListContactSubmissionsResponse, error)
	// Get a specific contact submission (admin only)
	GetContactSubmission(context.Context, *GetContactSubmissionRequest) (*ContactSubmission, error)
	// Mark contact submission as read (admin only)
	MarkContactSubmissionAsRead(context.Context, *MarkContactSubmissionAsReadRequest) (*ContactSubmission, error)
	// Delete contact submission (admin only)
	DeleteContactSubmission(context.Context, *DeleteContactSubmissionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedContactServiceServer()
}

// UnimplementedContactServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContactServiceServer struct {
}

func (UnimplementedContactServiceServer) SubmitContactForm(context.Context, *SubmitContactFormRequest) (*ContactSubmission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitContactForm not implemented")
}
func (UnimplementedContactServiceServer) ListContactSubmissions(context.Context, *ListContactSubmissionsRequest) (*ListContactSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactSubmissions not implemented")
}
func (UnimplementedContactServiceServer) GetContactSubmission(context.Context, *GetContactSubmissionRequest) (*ContactSubmission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactSubmission not implemented")
}
func (UnimplementedContactServiceServer) MarkContactSubmissionAsRead(context.Context, *MarkContactSubmissionAsReadRequest) (*ContactSubmission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkContactSubmissionAsRead not implemented")
}
func (UnimplementedContactServiceServer) DeleteContactSubmission(context.Context, *DeleteContactSubmissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContactSubmission not implemented")
}
func (UnimplementedContactServiceServer) mustEmbedUnimplementedContactServiceServer() {}

// UnsafeContactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactServiceServer will
// result in compilation errors.
type UnsafeContactServiceServer interface {
	mustEmbedUnimplementedContactServiceServer()
}

func RegisterContactServiceServer(s grpc.ServiceRegistrar, srv ContactServiceServer) {
	s.RegisterService(&ContactService_ServiceDesc, srv)
}

func _ContactService_SubmitContactForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitContactFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).SubmitContactForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_SubmitContactForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).SubmitContactForm(ctx, req.(*SubmitContactFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_ListContactSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).ListContactSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_ListContactSubmissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).ListContactSubmissions(ctx, req.(*ListContactSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_GetContactSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).GetContactSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_GetContactSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).GetContactSubmission(ctx, req.(*GetContactSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_MarkContactSubmissionAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkContactSubmissionAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).MarkContactSubmissionAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_MarkContactSubmissionAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).MarkContactSubmissionAsRead(ctx, req.(*MarkContactSubmissionAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_DeleteContactSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).DeleteContactSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_DeleteContactSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).DeleteContactSubmission(ctx, req.(*DeleteContactSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactService_ServiceDesc is the grpc.ServiceDesc for ContactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contact.v1.ContactService",
	HandlerType: (*ContactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitContactForm",
			Handler:    _ContactService_SubmitContactForm_Handler,
		},
		{
			MethodName: "ListContactSubmissions",
			Handler:    _ContactService_ListContactSubmissions_Handler,
		},
		{
			MethodName: "GetContactSubmission",
			Handler:    _ContactService_GetContactSubmission_Handler,
		},
		{
			MethodName: "MarkContactSubmissionAsRead",
			Handler:    _ContactService_MarkContactSubmissionAsRead_Handler,
		},
		{
			MethodName: "DeleteContactSubmission",
			Handler:    _ContactService_DeleteContactSubmission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contact/v1/contact.proto",
}
