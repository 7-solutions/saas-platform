# Optimized Development Dockerfile for CMS
FROM node:22-alpine AS development

# Install minimal system dependencies for development
RUN apk add --no-cache \
    libc6-compat \
    dumb-init && \
    # Enable corepack and prepare pnpm
    corepack enable && \
    corepack prepare pnpm@9.15.0 --activate

# Create non-root user for security (even in development)
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Set working directory
WORKDIR /app

# Change ownership to non-root user
RUN chown -R nextjs:nodejs /app

# Copy package configuration files for optimal caching
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/cms/package.json ./apps/cms/
COPY packages/ui/package.json ./packages/ui/
COPY packages/shared/package.json ./packages/shared/

# Install dependencies with enhanced caching (separate cache for CMS dev)
RUN --mount=type=cache,id=pnpm-store-cms-dev,target=/root/.local/share/pnpm/store \
    --mount=type=cache,id=pnpm-metadata-cms-dev,target=/root/.cache/pnpm \
    pnpm install --frozen-lockfile --prefer-offline

# Copy source code with proper ownership
COPY --chown=nextjs:nodejs . .

# Switch to non-root user for security
USER nextjs

# Expose port
EXPOSE 3000

# Development environment variables (CMS-specific)
ENV NODE_ENV=development \
    NEXT_TELEMETRY_DISABLED=1 \
    NEXTAUTH_URL=http://localhost:3000

# Use dumb-init for proper signal handling in development
ENTRYPOINT ["dumb-init", "--"]

# Start development server with hot reload (TipTap and Next-Auth compatible)
CMD ["pnpm", "--filter", "@saas-platform/cms", "dev"]